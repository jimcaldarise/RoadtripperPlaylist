{"ast":null,"code":"import React from 'react';\nimport SearchBar from '../Components/SearchBar';\nconst clientId = '177d4f9af5fa4136b5640d6fdd051e05';\nconst redirectURI = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for an access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //clear the url parameters to grab a new access token when this\n      //one expires\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURL;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artists: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackURIs) {\n    if (!name || !trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/jamescaldarise/Desktop/roadtrip_playlist/src/util/Spotify.js"],"names":["React","SearchBar","clientId","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artists","album","uri","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchBar from '../Components/SearchBar';\n\nconst clientId = '177d4f9af5fa4136b5640d6fdd051e05';\nconst redirectURI = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n   getAccessToken() {\n      if(accessToken) {\n         return accessToken;\n      }\n\n      //check for an access token match\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n      if(accessTokenMatch && expiresInMatch) {\n         accessToken = accessTokenMatch[1];\n         const expiresIn = Number(expiresInMatch[1]);\n\n         //clear the url parameters to grab a new access token when this\n         //one expires\n         window.setTimeout(() => accessToken = '', expiresIn * 1000);\n         window.history.pushState('Access Token', null, '/');\n         return accessToken;\n      } else {\n         const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n         window.location = accessURL;\n      }\n   },\n\n   search(term) {\n      const accessToken = Spotify.getAccessToken();\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n         { headers: {\n            Authorization: `Bearer ${accessToken}`\n            }\n         }\n      ).then(response => {\n         return response.json();\n      }).then(jsonResponse => {\n         if(!jsonResponse.tracks) {\n            return [];\n         }\n         return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n         }));\n      });\n   },\n\n   savePlaylist(name, trackURIs) {\n      if(!name || !trackURIs.length) {\n         return;\n      }\n\n      const accessToken = Spotify.getAccessToken();\n      const headers = {Authorization: `Bearer ${accessToken}`};\n      let userId;\n\n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\n      ).then(response => response.json()\n      ).then(jsonResponse => {\n         userId = jsonResponse.id;\n         return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n         }).then(response => response.json()\n         ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n               headers: headers,\n               method: 'POST',\n               body: JSON.stringify({uris: trackURIs})\n            })\n         })\n      })\n   }\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}