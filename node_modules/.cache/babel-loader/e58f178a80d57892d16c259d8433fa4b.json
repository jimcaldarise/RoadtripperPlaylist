{"ast":null,"code":"var _jsxFileName = \"/Users/jamescaldarise/Desktop/roadtrip_playlist/src/Components/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', () => {\n      Spotify.getAccessToken();\n    });\n  }\n\n  addTrack(track) {\n    let idToSearch = track.id;\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(existingTrack => existingTrack.id === idToSearch)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  removeTrack(track) {\n    let idToRemove = track.id;\n    let tracks = this.state.playlistTracks;\n    const newTracks = tracks.filter(existingTrack => existingTrack.id !== idToRemove);\n    this.setState({\n      playlistTracks: newTracks\n    });\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({\n      playlistName: newName\n    });\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"RoadTripper Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jamescaldarise/Desktop/roadtrip_playlist/src/Components/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","Component","constructor","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","componentDidMount","window","addEventListener","getAccessToken","track","idToSearch","id","tracks","find","existingTrack","push","setState","idToRemove","newTracks","filter","newName","trackURIs","map","uri","then","term","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,YAAY,EAAE,aAFH;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAKA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKI,MAAL,GAAc,KAAKA,MAAL,CAAYJ,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAACjB,MAAAA,OAAO,CAACkB,cAAR;AAAyB,KAAhE;AACD;;AAEDT,EAAAA,QAAQ,CAACU,KAAD,EAAQ;AACd,QAAIC,UAAU,GAAGD,KAAK,CAACE,EAAvB;AACA,QAAIC,MAAM,GAAG,KAAKjB,KAAL,CAAWG,cAAxB;;AACA,QAAGc,MAAM,CAACC,IAAP,CAAYC,aAAa,IAAIA,aAAa,CAACH,EAAd,KAAqBD,UAAlD,CAAH,EAAkE;AAChE;AACD;;AAEDE,IAAAA,MAAM,CAACG,IAAP,CAAYN,KAAZ;AACA,SAAKO,QAAL,CAAc;AAAClB,MAAAA,cAAc,EAAEc;AAAjB,KAAd;AACD;;AAEDX,EAAAA,WAAW,CAACQ,KAAD,EAAQ;AACjB,QAAIQ,UAAU,GAAGR,KAAK,CAACE,EAAvB;AACA,QAAIC,MAAM,GAAG,KAAKjB,KAAL,CAAWG,cAAxB;AACA,UAAMoB,SAAS,GAAGN,MAAM,CAACO,MAAP,CAAcL,aAAa,IAAIA,aAAa,CAACH,EAAd,KAAqBM,UAApD,CAAlB;AAEA,SAAKD,QAAL,CAAc;AAAClB,MAAAA,cAAc,EAAEoB;AAAjB,KAAd;AACD;;AAEDhB,EAAAA,kBAAkB,CAACkB,OAAD,EAAU;AAC1B,SAAKJ,QAAL,CAAc;AAACnB,MAAAA,YAAY,EAAEuB;AAAf,KAAd;AACD;;AAEDjB,EAAAA,YAAY,GAAG;AACb,QAAIkB,SAAS,GAAG,KAAK1B,KAAL,CAAWG,cAAX,CAA0BwB,GAA1B,CAA8Bb,KAAK,IAAIA,KAAK,CAACc,GAA7C,CAAhB;AACAjC,IAAAA,OAAO,CAACa,YAAR,CAAqB,KAAKR,KAAL,CAAWE,YAAhC,EAA8CwB,SAA9C,EAAyDG,IAAzD,CAA8D,MAAM;AAClE,WAAKR,QAAL,CAAc;AACZnB,QAAAA,YAAY,EAAE,cADF;AAEZC,QAAAA,cAAc,EAAE;AAFJ,OAAd;AAID,KALD;AAMD;;AAEDM,EAAAA,MAAM,CAACqB,IAAD,EAAO;AACXnC,IAAAA,OAAO,CAACc,MAAR,CAAeqB,IAAf,EAAqBD,IAArB,CAA0B5B,aAAa,IAAI;AACzC,WAAKoB,QAAL,CAAc;AAACpB,QAAAA,aAAa,EAAEA;AAAhB,OAAd;AACD,KAFD;AAID;;AAED8B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,QAAQ,EAAE,KAAKtB;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE,QAAC,aAAD;AAAe,YAAA,aAAa,EAAE,KAAKT,KAAL,CAAWC,aAAzC;AAAwD,YAAA,KAAK,EAAE,KAAKG;AAApE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,QAAD;AAAU,YAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,YAAnC;AACI,YAAA,cAAc,EAAE,KAAKF,KAAL,CAAWG,cAD/B;AAEI,YAAA,QAAQ,EAAE,KAAKG,WAFnB;AAGI,YAAA,YAAY,EAAE,KAAKC,kBAHvB;AAII,YAAA,MAAM,EAAE,KAAKC;AAJjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA5E+B;;AA+ElC,eAAeZ,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist.js';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', () => {Spotify.getAccessToken()});\n  }\n\n  addTrack(track) {\n    let idToSearch = track.id;\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(existingTrack => existingTrack.id === idToSearch)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let idToRemove = track.id;\n    let tracks = this.state.playlistTracks;\n    const newTracks = tracks.filter(existingTrack => existingTrack.id !== idToRemove);\n\n    this.setState({playlistTracks: newTracks});\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({playlistName: newName});\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <h1>RoadTripper Playlist</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                playlistTracks={this.state.playlistTracks}\n                onRemove={this.removeTrack}\n                onNameChange={this.updatePlaylistName}\n                onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}